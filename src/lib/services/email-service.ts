import nodemailer from 'nodemailer'
import '../config/env'

const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
})

export async function sendEmail(summary: string, applicantName: string, applicantEmail: string, jobPosition: string) {
  try {
    await transporter.sendMail({
      from: `"HR Agent" <akeron.allkushi@softup.co>`,
      to: 'oniakeron@gmail.com', // Your HR email
      subject: `AI Analysis: Candidate ${applicantName} for ${jobPosition}`,
      text: `Applicant Email: ${applicantEmail}\n\nSummary:\n\n${summary}`,
    })
    console.log(`üìß Sent HR email for ${applicantName}`)
  } catch (error) {
    console.error('‚ùå Email sending error:', error)
    throw error
  }
}

export async function scheduleRejectionEmail({email, name, companyName, jobPosition, delayMinutes}: {email: string, name: string, companyName: string, jobPosition: string, delayMinutes: number}) {
  const rejectionMessage = `
Dear ${name},

Thank you for your interest in joining ${companyName} and for taking the time to submit your application.

After careful review of your qualifications, we have decided to move forward with other candidates whose experience more closely aligns with our current requirements for the ${jobPosition} position.

We encourage you to apply for future opportunities that match your skills and experience. We maintain all applications on file and may reach out if a suitable position becomes available.

We appreciate your interest in our company and wish you the best in your job search.

Best regards,
The ${companyName} Hiring Team

---
This message was generated by our AI-powered initial screening system.
For questions, please contact hr@company.com
`

  setTimeout(async () => {
    try {
      await transporter.sendMail({
        from: `"HR Team" <akeron.allkushi@softup.co>`,
        to: email,
        subject: 'Application Update',
        text: rejectionMessage,
      })
      console.log(`üìß Sent rejection email to ${name}`)
    } catch (error) {
      console.error(`‚ùå Failed to send rejection email to ${name}:`, error)
    }
  }, delayMinutes * 60 * 1000)
  
  console.log(`‚è∞ Scheduled rejection email for ${name} in ${delayMinutes} minutes`)
}

export async function sendInterviewInvitation({
  candidateEmail,
  candidateName,
  scheduledTime,
  meetingLink,
  jobTitle,
  companyName,
  duration = 45
}: {
  candidateEmail: string
  candidateName: string
  scheduledTime: Date
  meetingLink: string
  jobTitle: string
  companyName: string
  duration?: number
}) {
  const interviewMessage = `
Dear ${candidateName},

Congratulations! We are pleased to invite you to interview for the ${jobTitle} position at ${companyName}.

üìÖ INTERVIEW DETAILS:
‚Ä¢ Date & Time: ${scheduledTime.toLocaleString('en-US', { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric', 
    hour: '2-digit', 
    minute: '2-digit',
    timeZone: 'Europe/Stockholm'
  })} (Stockholm time)
‚Ä¢ Duration: ${duration} minutes
‚Ä¢ Format: Video call via Google Meet

üîó JOIN THE MEETING:
${meetingLink}

üí° PREPARATION TIPS:
‚Ä¢ Test your camera and microphone beforehand
‚Ä¢ Have your resume and portfolio ready to discuss
‚Ä¢ Prepare questions about the role and company
‚Ä¢ Join 2-3 minutes early

If you need to reschedule, please reply to this email as soon as possible.

We look forward to speaking with you!

Best regards,
The ${companyName} Hiring Team

---
This interview was scheduled automatically based on our AI analysis of your application.
`

  try {
    await transporter.sendMail({
      from: `"HR Team" <akeron.allkushi@softup.co>`,
      to: candidateEmail,
      subject: `Interview Invitation - ${jobTitle} at ${companyName}`,
      text: interviewMessage,
    })
    console.log(`üìß Sent interview invitation to ${candidateName}`)
  } catch (error) {
    console.error(`‚ùå Failed to send interview invitation to ${candidateName}:`, error)
    throw error
  }
}